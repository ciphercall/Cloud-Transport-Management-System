@using Cloud_Transport.Models
@model Cloud_Transport.Models.PageModel

@{
    ViewBag.Title = "VehicleTripExpense";
    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    CnfDbContext db = new CnfDbContext();
    Int64 companyID = Convert.ToInt64(HttpContext.Current.Session["loggedCompID"].ToString());
    Int64 loggedUserID = Convert.ToInt64(HttpContext.Current.Session["loggedUserID"].ToString());


    var permission_Check = from m in db.AslRoleDbSet
                           where m.COMPID == companyID && m.USERID == loggedUserID
                               && m.CONTROLLERNAME == "TmsReport" && m.ACTIONNAME == "VehicleTripExpense"
                           select m;
    var Status = "";
    foreach (var check in permission_Check)
    {
        Status = check.STATUS;
    }

    if (Status == "A")
    {
    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);


    List<SelectListItem> listofCostpoolName = new List<SelectListItem>();
    var findCostpoolName = (from m in db.GlCostPoolDbSet where m.COMPID == companyID select new { m.COSTPID, m.COSTPNM }).ToList();
    foreach (var item in findCostpoolName)
    {
        listofCostpoolName.Add(new SelectListItem { Text = item.COSTPNM.ToString(), Value = Convert.ToString(item.COSTPID) });
    }
}


<link href="~/Content/bootstrap_datepicker_css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datepicker.js"></script>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.TmsTripmst.COMPID, new { @Value = companyID })

    <div id="contentHeaderBox">
        <h1 style="padding-left: 16px;">VEHICLE-TRIP EXPENSE</h1>
    </div>
    <br />

    <div class="col-md-12">
        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Vehicle No:    ")
                </div>
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.AGlMaster.COSTPID, listofCostpoolName, htmlAttributes: new {@class = "form-control", @Value = currentDateTime.ToString("MMM-yy").ToUpper()})
                    @Html.ValidationMessageFor(model => model.AGlMaster.COSTPID, "", new {@class = "text-danger"})
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Month-Year:    ")
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.Report_FromDate, htmlAttributes: new {id = "fromDate", @class = "form-control", @Value = currentDateTime.ToString("MMM-yy").ToUpper()})
                    @Html.ValidationMessageFor(model => model.Report_FromDate, "", new {@class = "text-danger"})
                </div>
            </div>

            <br/>
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <input type="submit" class="btn btn-success" value="Print" formtarget="_blank"/>
                </div>
            </div>


        </div>
    </div>



    <script type="text/javascript">
        $(document).ready(function () {

            $('#fromDate').datepicker({
                format: 'M-yy',
                viewMode: "months",
                minViewMode: "months",
                autoClose: true
                //format: "dd-M-yyyy",
                //autoclose: true,
                //todayHighlight: true,

            });
            //.on('show', function (e) {
            //    if (e.date) {
            //        $(this).data('stickyDate', e.date);
            //    }
            //    else {
            //        $(this).data('stickyDate', null);
            //    }
            //}).on('hide', function (e) {
            //    var stickyDate = $(this).data('stickyDate');

            //    if (!e.date && stickyDate) {
            //        $(this).datepicker('setDate', stickyDate);
            //        $(this).data('stickyDate', null);
            //    }
            //    document.getElementById("toDate").focus();
            //});




        });


    </script>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}











